/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package practica3;

import java.awt.Color;
import static java.lang.Thread.sleep;
import practica1.Pila;
import practica2.Consumidor;
import practica2.Productor;

/**
 *
 * @author danie
 */
public class PilaFrame extends java.awt.Frame {

    /**
     * Creates new form PilaFrame
     */
    public PilaFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws InterruptedException{

        int capacidad = 10, ancho = 600, alto = 720, apila = 5, desapila = 5;

        PilaFrame f = new PilaFrame();
        f.setSize(ancho, alto);
        f.setBackground(Color.yellow);
        f.setLocation(100, 100);
        
        CanvasPila cp = new CanvasPila(capacidad);
        //cp.setLocation(20, 30);
        //cp.setSize(300,400);
        //cp.setBackground(Color.cyan);
        f.add(cp);

        f.setVisible(true);

        Pila pila = new Pila(capacidad, cp);

        Productor p1 = new Productor(pila, apila);
        Productor p2 = new Productor(pila, apila);
        Productor p3 = new Productor(pila, apila);
        Productor p4 = new Productor(pila, apila);
        Consumidor r = new Consumidor(pila, desapila);
        Thread c1 = new Thread(r);
        Thread c2 = new Thread(r);

        p1.start();
        p2.start();
        p3.start();
        p4.start();
        c1.start();
        c1.join();
        sleep(1000);

        for (int i = 1; i <= 3; i++) {

            synchronized (pila) {
                pila.notifyAll();
            }
            System.out.println("Notificacion "+ i);
            sleep(1000);
        }
       p1.join();
       p2.join();
       p3.join();
       p4.join();

        System.exit(0);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
