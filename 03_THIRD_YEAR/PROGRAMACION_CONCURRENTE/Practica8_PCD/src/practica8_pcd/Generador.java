/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package practica8_pcd;

import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author usuario
 */
public class Generador extends java.awt.Frame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws InterruptedException {
        int numcli = 50, ancho = 1000, alto = 720;

        Generador f = new Generador();
        f.setSize(ancho, alto);
        f.setTitle("Practica 8 PCD");
        f.setLocation(500, 100);

        CanvasCentro cc = new CanvasCentro(ancho, alto);
        f.add(cc);
        f.setVisible(true);

        Centro c = new Centro();
        ExecutorService thpTarjeta = Executors.newFixedThreadPool(10);
        ExecutorService thpEfectivo = Executors.newFixedThreadPool(10);
        Future<Integer> future;

        Random rnd = new Random();
        rnd.setSeed(System.currentTimeMillis());
        try {
            ArrayList<Future<Integer>> resultadoEfectivo = new ArrayList();
            ArrayList<Future<Integer>> resultadoTarjeta = new ArrayList();
            for (int i = 0; i < numcli; i++) {
                if (rnd.nextInt(10) > 4) {
                    Efectivo e = new Efectivo(c, cc);
                    future = thpEfectivo.submit(e);
                    resultadoEfectivo.add(future);
                } else {
                    Tarjeta t = new Tarjeta(c, cc);
                    future = thpTarjeta.submit(t);
                    resultadoTarjeta.add(future);
                }

                Thread.sleep(500);
            }

            thpEfectivo.shutdown();
            thpTarjeta.shutdown();

            int tiempoEfectivo = 0, tiempoTarjeta = 0;
            int resultados;
            for (Future<Integer> resultado : resultadoEfectivo) {
                try {
                    resultados = resultado.get();
                    tiempoEfectivo += resultados;
                } catch (ExecutionException ex) {
                    Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (Future<Integer> resultado : resultadoTarjeta) {
                try {
                    resultados = resultado.get();
                    tiempoTarjeta += resultados;
                } catch (ExecutionException ex) {
                    Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            System.out.println("Tiempo total en EFECTIVO ---> "+(tiempoEfectivo/1000) + " segs.");
            System.out.println("Tiempo total en TARJETA ---> "+(tiempoTarjeta/1000)+" segs.");
            
            cc.tiempoFinal(tiempoEfectivo, tiempoTarjeta);
            sleep(10000);
            System.exit(0);
        } catch (InterruptedException ex) {
            java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
